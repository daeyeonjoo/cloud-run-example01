# This config was automatically generated from your source code
# Stacks detected: deps:java:.,tool:gradle:
version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

executors:
  default-executor:
    docker:
      - image: cimg/openjdk:21.0
    resource_class: small

feature_branch_only: &feature_branch_only
  filters:
    branches:
      only: /^feature\/.*/

feature_branch_only2: &feature_branch_only2
  filters:
    branches:
      only: /^feature\/.*/

jobs:
  build:
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      
      # Setup Docker
      - setup_remote_docker:
          docker_layer_caching: true
      
      # Login to Docker Hub
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      
      # Build and push the Docker image
      - run:
          name: Build and push Docker image
          command: |
            # Build the Spring Boot application and create Docker image
            ./gradlew bootBuildImage \
              -PdockerId=$DOCKERHUB_USERNAME \
              -PdockerPassword=$DOCKERHUB_PASSWORD \
              -Porg.gradle.native=true \
              --info
            
            # Tag the image
            docker tag "${DOCKERHUB_USERNAME}/cloud-run-example01:latest" "${DOCKERHUB_USERNAME}/cloud-run-example01:${CIRCLE_SHA1}"
            
            # Push the image to Docker Hub
            docker push "${DOCKERHUB_USERNAME}/cloud-run-example01:latest"
            docker push "${DOCKERHUB_USERNAME}/cloud-run-example01:${CIRCLE_SHA1}"
    
    # Save the image name and tag for the deploy job
    environment:
      DOCKER_IMAGE: ${DOCKERHUB_USERNAME}/cloud-run-example01:${CIRCLE_SHA1}

  deploy:
    docker:
      - image: cimg/google-cli:latest
    steps:
      - checkout
      
      # Login to Docker Hub
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      
      # Configure gcloud and deploy to Cloud Run
      - run:
          name: Authenticate with Google Cloud
          command: |
            # Install jq for JSON parsing
            sudo apt-get update && sudo apt-get install -y jq
            
            # Save the service account key to a file
            echo "$GCLOUD_SERVICE_KEY" > /tmp/service-account.json
            
            # Get the client email from the JSON key
            CLIENT_EMAIL=$(jq -r '.client_email' /tmp/service-account.json)
            
            # Authenticate using the service account
            gcloud auth activate-service-account $CLIENT_EMAIL --key-file=/tmp/service-account.json
            
            # Configure gcloud
            gcloud --quiet config set project $GCLOUD_PROJECT_ID
            gcloud --quiet config set compute/region $GCLOUD_REGION
            gcloud --quiet auth configure-docker
            
            # Verify authentication
            gcloud auth list
      
      - run:
          name: Deploy to Cloud Run
          command: |
            # Pull the image first to ensure we have access
            docker pull << pipeline.parameters.docker_image >>
            
            # Deploy the service to Cloud Run
            gcloud run deploy $CLOUD_RUN_SERVICE_NAME \
              --image=<< pipeline.parameters.docker_image >> \
              --platform=managed \
              --region=$GCLOUD_REGION \
              --allow-unauthenticated \
              --set-env-vars=SPRING_PROFILES_ACTIVE=prod \
              --port=8080
              
            # Get the service URL
            SERVICE_URL=$(gcloud run services describe $CLOUD_RUN_SERVICE_NAME \
              --platform=managed \
              --region=$GCLOUD_REGION \
              --format='value(status.url)')
            
            echo "Deployed to: $SERVICE_URL"

# Define pipeline parameters
parameters:
  docker_image:
    type: string
    default: ""

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          context: 
            - deploy-context
          filters:
            branches:
              only: master
